/*
 * This file is generated by jOOQ.
 */
package pl.bartekbak.lawyer.generate.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.bartekbak.lawyer.generate.jooq.Keys;
import pl.bartekbak.lawyer.generate.jooq.Public;
import pl.bartekbak.lawyer.generate.jooq.tables.records.TaskContactRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskContact extends TableImpl<TaskContactRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.task_contact</code>
     */
    public static final TaskContact TASK_CONTACT = new TaskContact();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskContactRecord> getRecordType() {
        return TaskContactRecord.class;
    }

    /**
     * The column <code>public.task_contact.id</code>.
     */
    public final TableField<TaskContactRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.task_contact.task</code>.
     */
    public final TableField<TaskContactRecord, Integer> TASK = createField(DSL.name("task"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.task_contact.contact</code>.
     */
    public final TableField<TaskContactRecord, Integer> CONTACT = createField(DSL.name("contact"), SQLDataType.INTEGER, this, "");

    private TaskContact(Name alias, Table<TaskContactRecord> aliased) {
        this(alias, aliased, null);
    }

    private TaskContact(Name alias, Table<TaskContactRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.task_contact</code> table reference
     */
    public TaskContact(String alias) {
        this(DSL.name(alias), TASK_CONTACT);
    }

    /**
     * Create an aliased <code>public.task_contact</code> table reference
     */
    public TaskContact(Name alias) {
        this(alias, TASK_CONTACT);
    }

    /**
     * Create a <code>public.task_contact</code> table reference
     */
    public TaskContact() {
        this(DSL.name("task_contact"), null);
    }

    public <O extends Record> TaskContact(Table<O> child, ForeignKey<O, TaskContactRecord> key) {
        super(child, key, TASK_CONTACT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TaskContactRecord, Integer> getIdentity() {
        return (Identity<TaskContactRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TaskContactRecord> getPrimaryKey() {
        return Keys.TASK_CONTACT_PKEY;
    }

    @Override
    public List<ForeignKey<TaskContactRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TASK_CONTACT__TASK_CONTACT_TASK_FKEY, Keys.TASK_CONTACT__TASK_CONTACT_CONTACT_FKEY);
    }

    private transient Task _task;
    private transient Contact _contact;

    public Task task() {
        if (_task == null)
            _task = new Task(this, Keys.TASK_CONTACT__TASK_CONTACT_TASK_FKEY);

        return _task;
    }

    public Contact contact() {
        if (_contact == null)
            _contact = new Contact(this, Keys.TASK_CONTACT__TASK_CONTACT_CONTACT_FKEY);

        return _contact;
    }

    @Override
    public TaskContact as(String alias) {
        return new TaskContact(DSL.name(alias), this);
    }

    @Override
    public TaskContact as(Name alias) {
        return new TaskContact(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskContact rename(String name) {
        return new TaskContact(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskContact rename(Name name) {
        return new TaskContact(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
