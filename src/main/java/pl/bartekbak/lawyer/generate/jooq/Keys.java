/*
 * This file is generated by jOOQ.
 */
package pl.bartekbak.lawyer.generate.jooq;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import pl.bartekbak.lawyer.generate.jooq.tables.DbAddress;
import pl.bartekbak.lawyer.generate.jooq.tables.DbContact;
import pl.bartekbak.lawyer.generate.jooq.tables.DbContactAddress;
import pl.bartekbak.lawyer.generate.jooq.tables.DbContactRole;
import pl.bartekbak.lawyer.generate.jooq.tables.DbContactRoleLawsuit;
import pl.bartekbak.lawyer.generate.jooq.tables.DbCourt;
import pl.bartekbak.lawyer.generate.jooq.tables.DbCourtAddress;
import pl.bartekbak.lawyer.generate.jooq.tables.DbEvent;
import pl.bartekbak.lawyer.generate.jooq.tables.DbEventLawsuit;
import pl.bartekbak.lawyer.generate.jooq.tables.DbLawsuit;
import pl.bartekbak.lawyer.generate.jooq.tables.DbLawsuitContact;
import pl.bartekbak.lawyer.generate.jooq.tables.DbLawsuitTask;
import pl.bartekbak.lawyer.generate.jooq.tables.DbNote;
import pl.bartekbak.lawyer.generate.jooq.tables.DbPayment;
import pl.bartekbak.lawyer.generate.jooq.tables.DbPoa;
import pl.bartekbak.lawyer.generate.jooq.tables.DbTag;
import pl.bartekbak.lawyer.generate.jooq.tables.DbTask;
import pl.bartekbak.lawyer.generate.jooq.tables.DbTaskContact;
import pl.bartekbak.lawyer.generate.jooq.tables.records.DbAddressRecord;
import pl.bartekbak.lawyer.generate.jooq.tables.records.DbContactAddressRecord;
import pl.bartekbak.lawyer.generate.jooq.tables.records.DbContactRecord;
import pl.bartekbak.lawyer.generate.jooq.tables.records.DbContactRoleLawsuitRecord;
import pl.bartekbak.lawyer.generate.jooq.tables.records.DbContactRoleRecord;
import pl.bartekbak.lawyer.generate.jooq.tables.records.DbCourtAddressRecord;
import pl.bartekbak.lawyer.generate.jooq.tables.records.DbCourtRecord;
import pl.bartekbak.lawyer.generate.jooq.tables.records.DbEventLawsuitRecord;
import pl.bartekbak.lawyer.generate.jooq.tables.records.DbEventRecord;
import pl.bartekbak.lawyer.generate.jooq.tables.records.DbLawsuitContactRecord;
import pl.bartekbak.lawyer.generate.jooq.tables.records.DbLawsuitRecord;
import pl.bartekbak.lawyer.generate.jooq.tables.records.DbLawsuitTaskRecord;
import pl.bartekbak.lawyer.generate.jooq.tables.records.DbNoteRecord;
import pl.bartekbak.lawyer.generate.jooq.tables.records.DbPaymentRecord;
import pl.bartekbak.lawyer.generate.jooq.tables.records.DbPoaRecord;
import pl.bartekbak.lawyer.generate.jooq.tables.records.DbTagRecord;
import pl.bartekbak.lawyer.generate.jooq.tables.records.DbTaskContactRecord;
import pl.bartekbak.lawyer.generate.jooq.tables.records.DbTaskRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<DbAddressRecord> ADDRESS_PKEY = Internal.createUniqueKey(DbAddress.DB_ADDRESS, DSL.name("address_pkey"), new TableField[] { DbAddress.DB_ADDRESS.ADDRESS_ID }, true);
    public static final UniqueKey<DbContactRecord> CONTACT_PKEY = Internal.createUniqueKey(DbContact.DB_CONTACT, DSL.name("contact_pkey"), new TableField[] { DbContact.DB_CONTACT.CONTACT_ID }, true);
    public static final UniqueKey<DbContactAddressRecord> CONTACT_ADDRESS_PKEY = Internal.createUniqueKey(DbContactAddress.DB_CONTACT_ADDRESS, DSL.name("contact_address_pkey"), new TableField[] { DbContactAddress.DB_CONTACT_ADDRESS.ID }, true);
    public static final UniqueKey<DbContactRoleRecord> CONTACT_ROLE_PKEY = Internal.createUniqueKey(DbContactRole.DB_CONTACT_ROLE, DSL.name("contact_role_pkey"), new TableField[] { DbContactRole.DB_CONTACT_ROLE.ID }, true);
    public static final UniqueKey<DbContactRoleLawsuitRecord> CONTACT_ROLE_LAWSUIT_PKEY = Internal.createUniqueKey(DbContactRoleLawsuit.DB_CONTACT_ROLE_LAWSUIT, DSL.name("contact_role_lawsuit_pkey"), new TableField[] { DbContactRoleLawsuit.DB_CONTACT_ROLE_LAWSUIT.ID }, true);
    public static final UniqueKey<DbCourtRecord> COURT_PKEY = Internal.createUniqueKey(DbCourt.DB_COURT, DSL.name("court_pkey"), new TableField[] { DbCourt.DB_COURT.COURT_ID }, true);
    public static final UniqueKey<DbCourtAddressRecord> COURT_ADDRESS_PKEY = Internal.createUniqueKey(DbCourtAddress.DB_COURT_ADDRESS, DSL.name("court_address_pkey"), new TableField[] { DbCourtAddress.DB_COURT_ADDRESS.ID }, true);
    public static final UniqueKey<DbEventRecord> EVENT_PKEY = Internal.createUniqueKey(DbEvent.DB_EVENT, DSL.name("event_pkey"), new TableField[] { DbEvent.DB_EVENT.EVENT_ID }, true);
    public static final UniqueKey<DbEventLawsuitRecord> EVENT_LAWSUIT_PKEY = Internal.createUniqueKey(DbEventLawsuit.DB_EVENT_LAWSUIT, DSL.name("event_lawsuit_pkey"), new TableField[] { DbEventLawsuit.DB_EVENT_LAWSUIT.ID }, true);
    public static final UniqueKey<DbLawsuitRecord> LAWSUIT_PKEY = Internal.createUniqueKey(DbLawsuit.DB_LAWSUIT, DSL.name("lawsuit_pkey"), new TableField[] { DbLawsuit.DB_LAWSUIT.LAWSUIT_ID }, true);
    public static final UniqueKey<DbLawsuitContactRecord> LAWSUIT_CONTACT_PKEY = Internal.createUniqueKey(DbLawsuitContact.DB_LAWSUIT_CONTACT, DSL.name("lawsuit_contact_pkey"), new TableField[] { DbLawsuitContact.DB_LAWSUIT_CONTACT.ID }, true);
    public static final UniqueKey<DbLawsuitTaskRecord> LAWSUIT_TASK_PKEY = Internal.createUniqueKey(DbLawsuitTask.DB_LAWSUIT_TASK, DSL.name("lawsuit_task_pkey"), new TableField[] { DbLawsuitTask.DB_LAWSUIT_TASK.ID }, true);
    public static final UniqueKey<DbNoteRecord> NOTE_PKEY = Internal.createUniqueKey(DbNote.DB_NOTE, DSL.name("note_pkey"), new TableField[] { DbNote.DB_NOTE.NOTE_ID }, true);
    public static final UniqueKey<DbPaymentRecord> PAYMENT_PKEY = Internal.createUniqueKey(DbPayment.DB_PAYMENT, DSL.name("payment_pkey"), new TableField[] { DbPayment.DB_PAYMENT.PAYMENT_ID }, true);
    public static final UniqueKey<DbPoaRecord> POA_PKEY = Internal.createUniqueKey(DbPoa.DB_POA, DSL.name("poa_pkey"), new TableField[] { DbPoa.DB_POA.POA_ID }, true);
    public static final UniqueKey<DbTagRecord> TAG_PKEY = Internal.createUniqueKey(DbTag.DB_TAG, DSL.name("tag_pkey"), new TableField[] { DbTag.DB_TAG.TAG_ID }, true);
    public static final UniqueKey<DbTaskRecord> TASK_PKEY = Internal.createUniqueKey(DbTask.DB_TASK, DSL.name("task_pkey"), new TableField[] { DbTask.DB_TASK.TASK_ID }, true);
    public static final UniqueKey<DbTaskContactRecord> TASK_CONTACT_PKEY = Internal.createUniqueKey(DbTaskContact.DB_TASK_CONTACT, DSL.name("task_contact_pkey"), new TableField[] { DbTaskContact.DB_TASK_CONTACT.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<DbContactAddressRecord, DbAddressRecord> DB_CONTACT_ADDRESS__CONTACT_ADDRESS_ADDRESS_FKEY = Internal.createForeignKey(DbContactAddress.DB_CONTACT_ADDRESS, DSL.name("contact_address_address_fkey"), new TableField[] { DbContactAddress.DB_CONTACT_ADDRESS.ADDRESS }, Keys.ADDRESS_PKEY, new TableField[] { DbAddress.DB_ADDRESS.ADDRESS_ID }, true);
    public static final ForeignKey<DbContactAddressRecord, DbContactRecord> DB_CONTACT_ADDRESS__CONTACT_ADDRESS_CONTACT_FKEY = Internal.createForeignKey(DbContactAddress.DB_CONTACT_ADDRESS, DSL.name("contact_address_contact_fkey"), new TableField[] { DbContactAddress.DB_CONTACT_ADDRESS.CONTACT }, Keys.CONTACT_PKEY, new TableField[] { DbContact.DB_CONTACT.CONTACT_ID }, true);
    public static final ForeignKey<DbContactRoleRecord, DbContactRecord> DB_CONTACT_ROLE__CONTACT_ROLE_CONTACT_FKEY = Internal.createForeignKey(DbContactRole.DB_CONTACT_ROLE, DSL.name("contact_role_contact_fkey"), new TableField[] { DbContactRole.DB_CONTACT_ROLE.CONTACT }, Keys.CONTACT_PKEY, new TableField[] { DbContact.DB_CONTACT.CONTACT_ID }, true);
    public static final ForeignKey<DbContactRoleLawsuitRecord, DbContactRoleRecord> DB_CONTACT_ROLE_LAWSUIT__CONTACT_ROLE_LAWSUIT_CONTACT_ROLE_FKEY = Internal.createForeignKey(DbContactRoleLawsuit.DB_CONTACT_ROLE_LAWSUIT, DSL.name("contact_role_lawsuit_contact_role_fkey"), new TableField[] { DbContactRoleLawsuit.DB_CONTACT_ROLE_LAWSUIT.CONTACT_ROLE }, Keys.CONTACT_ROLE_PKEY, new TableField[] { DbContactRole.DB_CONTACT_ROLE.ID }, true);
    public static final ForeignKey<DbContactRoleLawsuitRecord, DbLawsuitRecord> DB_CONTACT_ROLE_LAWSUIT__CONTACT_ROLE_LAWSUIT_LAWSUIT_FKEY = Internal.createForeignKey(DbContactRoleLawsuit.DB_CONTACT_ROLE_LAWSUIT, DSL.name("contact_role_lawsuit_lawsuit_fkey"), new TableField[] { DbContactRoleLawsuit.DB_CONTACT_ROLE_LAWSUIT.LAWSUIT }, Keys.LAWSUIT_PKEY, new TableField[] { DbLawsuit.DB_LAWSUIT.LAWSUIT_ID }, true);
    public static final ForeignKey<DbCourtRecord, DbAddressRecord> DB_COURT__COURT_ADDRESS_FKEY = Internal.createForeignKey(DbCourt.DB_COURT, DSL.name("court_address_fkey"), new TableField[] { DbCourt.DB_COURT.ADDRESS }, Keys.ADDRESS_PKEY, new TableField[] { DbAddress.DB_ADDRESS.ADDRESS_ID }, true);
    public static final ForeignKey<DbCourtAddressRecord, DbAddressRecord> DB_COURT_ADDRESS__COURT_ADDRESS_ADDRESS_FKEY = Internal.createForeignKey(DbCourtAddress.DB_COURT_ADDRESS, DSL.name("court_address_address_fkey"), new TableField[] { DbCourtAddress.DB_COURT_ADDRESS.ADDRESS }, Keys.ADDRESS_PKEY, new TableField[] { DbAddress.DB_ADDRESS.ADDRESS_ID }, true);
    public static final ForeignKey<DbCourtAddressRecord, DbCourtRecord> DB_COURT_ADDRESS__COURT_ADDRESS_CONTACT_FKEY = Internal.createForeignKey(DbCourtAddress.DB_COURT_ADDRESS, DSL.name("court_address_contact_fkey"), new TableField[] { DbCourtAddress.DB_COURT_ADDRESS.CONTACT }, Keys.COURT_PKEY, new TableField[] { DbCourt.DB_COURT.COURT_ID }, true);
    public static final ForeignKey<DbEventLawsuitRecord, DbEventRecord> DB_EVENT_LAWSUIT__EVENT_LAWSUIT_EVENT_FKEY = Internal.createForeignKey(DbEventLawsuit.DB_EVENT_LAWSUIT, DSL.name("event_lawsuit_event_fkey"), new TableField[] { DbEventLawsuit.DB_EVENT_LAWSUIT.EVENT }, Keys.EVENT_PKEY, new TableField[] { DbEvent.DB_EVENT.EVENT_ID }, true);
    public static final ForeignKey<DbEventLawsuitRecord, DbLawsuitRecord> DB_EVENT_LAWSUIT__EVENT_LAWSUIT_LAWSUIT_FKEY = Internal.createForeignKey(DbEventLawsuit.DB_EVENT_LAWSUIT, DSL.name("event_lawsuit_lawsuit_fkey"), new TableField[] { DbEventLawsuit.DB_EVENT_LAWSUIT.LAWSUIT }, Keys.LAWSUIT_PKEY, new TableField[] { DbLawsuit.DB_LAWSUIT.LAWSUIT_ID }, true);
    public static final ForeignKey<DbLawsuitContactRecord, DbContactRecord> DB_LAWSUIT_CONTACT__LAWSUIT_CONTACT_CONTACT_FKEY = Internal.createForeignKey(DbLawsuitContact.DB_LAWSUIT_CONTACT, DSL.name("lawsuit_contact_contact_fkey"), new TableField[] { DbLawsuitContact.DB_LAWSUIT_CONTACT.CONTACT }, Keys.CONTACT_PKEY, new TableField[] { DbContact.DB_CONTACT.CONTACT_ID }, true);
    public static final ForeignKey<DbLawsuitContactRecord, DbLawsuitRecord> DB_LAWSUIT_CONTACT__LAWSUIT_CONTACT_LAWSUIT_FKEY = Internal.createForeignKey(DbLawsuitContact.DB_LAWSUIT_CONTACT, DSL.name("lawsuit_contact_lawsuit_fkey"), new TableField[] { DbLawsuitContact.DB_LAWSUIT_CONTACT.LAWSUIT }, Keys.LAWSUIT_PKEY, new TableField[] { DbLawsuit.DB_LAWSUIT.LAWSUIT_ID }, true);
    public static final ForeignKey<DbLawsuitTaskRecord, DbLawsuitRecord> DB_LAWSUIT_TASK__LAWSUIT_TASK_LAWSUIT_FKEY = Internal.createForeignKey(DbLawsuitTask.DB_LAWSUIT_TASK, DSL.name("lawsuit_task_lawsuit_fkey"), new TableField[] { DbLawsuitTask.DB_LAWSUIT_TASK.LAWSUIT }, Keys.LAWSUIT_PKEY, new TableField[] { DbLawsuit.DB_LAWSUIT.LAWSUIT_ID }, true);
    public static final ForeignKey<DbLawsuitTaskRecord, DbTaskRecord> DB_LAWSUIT_TASK__LAWSUIT_TASK_TASK_FKEY = Internal.createForeignKey(DbLawsuitTask.DB_LAWSUIT_TASK, DSL.name("lawsuit_task_task_fkey"), new TableField[] { DbLawsuitTask.DB_LAWSUIT_TASK.TASK }, Keys.TASK_PKEY, new TableField[] { DbTask.DB_TASK.TASK_ID }, true);
    public static final ForeignKey<DbTaskContactRecord, DbContactRecord> DB_TASK_CONTACT__TASK_CONTACT_CONTACT_FKEY = Internal.createForeignKey(DbTaskContact.DB_TASK_CONTACT, DSL.name("task_contact_contact_fkey"), new TableField[] { DbTaskContact.DB_TASK_CONTACT.CONTACT }, Keys.CONTACT_PKEY, new TableField[] { DbContact.DB_CONTACT.CONTACT_ID }, true);
    public static final ForeignKey<DbTaskContactRecord, DbTaskRecord> DB_TASK_CONTACT__TASK_CONTACT_TASK_FKEY = Internal.createForeignKey(DbTaskContact.DB_TASK_CONTACT, DSL.name("task_contact_task_fkey"), new TableField[] { DbTaskContact.DB_TASK_CONTACT.TASK }, Keys.TASK_PKEY, new TableField[] { DbTask.DB_TASK.TASK_ID }, true);
}
