/*
 * This file is generated by jOOQ.
 */
package pl.bartekbak.lawyer.generate.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.bartekbak.lawyer.generate.jooq.Keys;
import pl.bartekbak.lawyer.generate.jooq.Public;
import pl.bartekbak.lawyer.generate.jooq.tables.records.DbLawsuitContactRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DbLawsuitContact extends TableImpl<DbLawsuitContactRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.db_lawsuit_contact</code>
     */
    public static final DbLawsuitContact DB_LAWSUIT_CONTACT = new DbLawsuitContact();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DbLawsuitContactRecord> getRecordType() {
        return DbLawsuitContactRecord.class;
    }

    /**
     * The column <code>public.db_lawsuit_contact.id</code>.
     */
    public final TableField<DbLawsuitContactRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.db_lawsuit_contact.contact</code>.
     */
    public final TableField<DbLawsuitContactRecord, UUID> CONTACT = createField(DSL.name("contact"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.db_lawsuit_contact.lawsuit</code>.
     */
    public final TableField<DbLawsuitContactRecord, UUID> LAWSUIT = createField(DSL.name("lawsuit"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.db_lawsuit_contact.role</code>.
     */
    public final TableField<DbLawsuitContactRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR(25), this, "");

    private DbLawsuitContact(Name alias, Table<DbLawsuitContactRecord> aliased) {
        this(alias, aliased, null);
    }

    private DbLawsuitContact(Name alias, Table<DbLawsuitContactRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.db_lawsuit_contact</code> table reference
     */
    public DbLawsuitContact(String alias) {
        this(DSL.name(alias), DB_LAWSUIT_CONTACT);
    }

    /**
     * Create an aliased <code>public.db_lawsuit_contact</code> table reference
     */
    public DbLawsuitContact(Name alias) {
        this(alias, DB_LAWSUIT_CONTACT);
    }

    /**
     * Create a <code>public.db_lawsuit_contact</code> table reference
     */
    public DbLawsuitContact() {
        this(DSL.name("db_lawsuit_contact"), null);
    }

    public <O extends Record> DbLawsuitContact(Table<O> child, ForeignKey<O, DbLawsuitContactRecord> key) {
        super(child, key, DB_LAWSUIT_CONTACT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<DbLawsuitContactRecord> getPrimaryKey() {
        return Keys.LAWSUIT_CONTACT_PKEY;
    }

    @Override
    public List<ForeignKey<DbLawsuitContactRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DB_LAWSUIT_CONTACT__LAWSUIT_CONTACT_CONTACT_FKEY, Keys.DB_LAWSUIT_CONTACT__LAWSUIT_CONTACT_LAWSUIT_FKEY);
    }

    private transient DbContact _dbContact;
    private transient DbLawsuit _dbLawsuit;

    public DbContact dbContact() {
        if (_dbContact == null)
            _dbContact = new DbContact(this, Keys.DB_LAWSUIT_CONTACT__LAWSUIT_CONTACT_CONTACT_FKEY);

        return _dbContact;
    }

    public DbLawsuit dbLawsuit() {
        if (_dbLawsuit == null)
            _dbLawsuit = new DbLawsuit(this, Keys.DB_LAWSUIT_CONTACT__LAWSUIT_CONTACT_LAWSUIT_FKEY);

        return _dbLawsuit;
    }

    @Override
    public DbLawsuitContact as(String alias) {
        return new DbLawsuitContact(DSL.name(alias), this);
    }

    @Override
    public DbLawsuitContact as(Name alias) {
        return new DbLawsuitContact(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DbLawsuitContact rename(String name) {
        return new DbLawsuitContact(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DbLawsuitContact rename(Name name) {
        return new DbLawsuitContact(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, UUID, UUID, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
