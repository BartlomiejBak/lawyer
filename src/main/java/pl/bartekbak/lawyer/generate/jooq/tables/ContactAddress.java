/*
 * This file is generated by jOOQ.
 */
package pl.bartekbak.lawyer.generate.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.bartekbak.lawyer.generate.jooq.Keys;
import pl.bartekbak.lawyer.generate.jooq.Public;
import pl.bartekbak.lawyer.generate.jooq.tables.records.ContactAddressRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContactAddress extends TableImpl<ContactAddressRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.contact_address</code>
     */
    public static final ContactAddress CONTACT_ADDRESS = new ContactAddress();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContactAddressRecord> getRecordType() {
        return ContactAddressRecord.class;
    }

    /**
     * The column <code>public.contact_address.id</code>.
     */
    public final TableField<ContactAddressRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.contact_address.address</code>.
     */
    public final TableField<ContactAddressRecord, Integer> ADDRESS = createField(DSL.name("address"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.contact_address.contact</code>.
     */
    public final TableField<ContactAddressRecord, Integer> CONTACT = createField(DSL.name("contact"), SQLDataType.INTEGER, this, "");

    private ContactAddress(Name alias, Table<ContactAddressRecord> aliased) {
        this(alias, aliased, null);
    }

    private ContactAddress(Name alias, Table<ContactAddressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.contact_address</code> table reference
     */
    public ContactAddress(String alias) {
        this(DSL.name(alias), CONTACT_ADDRESS);
    }

    /**
     * Create an aliased <code>public.contact_address</code> table reference
     */
    public ContactAddress(Name alias) {
        this(alias, CONTACT_ADDRESS);
    }

    /**
     * Create a <code>public.contact_address</code> table reference
     */
    public ContactAddress() {
        this(DSL.name("contact_address"), null);
    }

    public <O extends Record> ContactAddress(Table<O> child, ForeignKey<O, ContactAddressRecord> key) {
        super(child, key, CONTACT_ADDRESS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ContactAddressRecord, Integer> getIdentity() {
        return (Identity<ContactAddressRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ContactAddressRecord> getPrimaryKey() {
        return Keys.CONTACT_ADDRESS_PKEY;
    }

    @Override
    public List<ForeignKey<ContactAddressRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONTACT_ADDRESS__CONTACT_ADDRESS_ADDRESS_FKEY, Keys.CONTACT_ADDRESS__CONTACT_ADDRESS_CONTACT_FKEY);
    }

    private transient Address _address;
    private transient Contact _contact;

    public Address address() {
        if (_address == null)
            _address = new Address(this, Keys.CONTACT_ADDRESS__CONTACT_ADDRESS_ADDRESS_FKEY);

        return _address;
    }

    public Contact contact() {
        if (_contact == null)
            _contact = new Contact(this, Keys.CONTACT_ADDRESS__CONTACT_ADDRESS_CONTACT_FKEY);

        return _contact;
    }

    @Override
    public ContactAddress as(String alias) {
        return new ContactAddress(DSL.name(alias), this);
    }

    @Override
    public ContactAddress as(Name alias) {
        return new ContactAddress(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ContactAddress rename(String name) {
        return new ContactAddress(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ContactAddress rename(Name name) {
        return new ContactAddress(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
