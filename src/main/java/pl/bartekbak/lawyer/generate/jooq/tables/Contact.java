/*
 * This file is generated by jOOQ.
 */
package pl.bartekbak.lawyer.generate.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.bartekbak.lawyer.generate.jooq.Keys;
import pl.bartekbak.lawyer.generate.jooq.Public;
import pl.bartekbak.lawyer.generate.jooq.tables.records.ContactRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Contact extends TableImpl<ContactRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.contact</code>
     */
    public static final Contact CONTACT = new Contact();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContactRecord> getRecordType() {
        return ContactRecord.class;
    }

    /**
     * The column <code>public.contact.contact_id</code>.
     */
    public final TableField<ContactRecord, Integer> CONTACT_ID = createField(DSL.name("contact_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.contact.name</code>.
     */
    public final TableField<ContactRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>public.contact.first_name</code>.
     */
    public final TableField<ContactRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>public.contact.last_name</code>.
     */
    public final TableField<ContactRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>public.contact.email</code>.
     */
    public final TableField<ContactRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>public.contact.alt_email</code>.
     */
    public final TableField<ContactRecord, String> ALT_EMAIL = createField(DSL.name("alt_email"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>public.contact.phone</code>.
     */
    public final TableField<ContactRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.contact.alt_phone</code>.
     */
    public final TableField<ContactRecord, String> ALT_PHONE = createField(DSL.name("alt_phone"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.contact.pesel</code>.
     */
    public final TableField<ContactRecord, String> PESEL = createField(DSL.name("pesel"), SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>public.contact.address</code>.
     */
    public final TableField<ContactRecord, Integer> ADDRESS = createField(DSL.name("address"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.contact.company_name</code>.
     */
    public final TableField<ContactRecord, String> COMPANY_NAME = createField(DSL.name("company_name"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>public.contact.nip</code>.
     */
    public final TableField<ContactRecord, String> NIP = createField(DSL.name("nip"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.contact.regon</code>.
     */
    public final TableField<ContactRecord, String> REGON = createField(DSL.name("regon"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.contact.krs</code>.
     */
    public final TableField<ContactRecord, String> KRS = createField(DSL.name("krs"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.contact.date_created</code>.
     */
    public final TableField<ContactRecord, LocalDateTime> DATE_CREATED = createField(DSL.name("date_created"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.contact.modified</code>.
     */
    public final TableField<ContactRecord, LocalDateTime> MODIFIED = createField(DSL.name("modified"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.contact.secondary_address</code>.
     */
    public final TableField<ContactRecord, Integer> SECONDARY_ADDRESS = createField(DSL.name("secondary_address"), SQLDataType.INTEGER, this, "");

    private Contact(Name alias, Table<ContactRecord> aliased) {
        this(alias, aliased, null);
    }

    private Contact(Name alias, Table<ContactRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.contact</code> table reference
     */
    public Contact(String alias) {
        this(DSL.name(alias), CONTACT);
    }

    /**
     * Create an aliased <code>public.contact</code> table reference
     */
    public Contact(Name alias) {
        this(alias, CONTACT);
    }

    /**
     * Create a <code>public.contact</code> table reference
     */
    public Contact() {
        this(DSL.name("contact"), null);
    }

    public <O extends Record> Contact(Table<O> child, ForeignKey<O, ContactRecord> key) {
        super(child, key, CONTACT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ContactRecord, Integer> getIdentity() {
        return (Identity<ContactRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ContactRecord> getPrimaryKey() {
        return Keys.CONTACT_PKEY;
    }

    @Override
    public List<ForeignKey<ContactRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONTACT__CONTACT_ADDRESS_FKEY, Keys.CONTACT__CONTACT_SECONDARY_ADDRESS_FKEY);
    }

    private transient Address _contactAddressFkey;
    private transient Address _contactSecondaryAddressFkey;

    public Address contactAddressFkey() {
        if (_contactAddressFkey == null)
            _contactAddressFkey = new Address(this, Keys.CONTACT__CONTACT_ADDRESS_FKEY);

        return _contactAddressFkey;
    }

    public Address contactSecondaryAddressFkey() {
        if (_contactSecondaryAddressFkey == null)
            _contactSecondaryAddressFkey = new Address(this, Keys.CONTACT__CONTACT_SECONDARY_ADDRESS_FKEY);

        return _contactSecondaryAddressFkey;
    }

    @Override
    public Contact as(String alias) {
        return new Contact(DSL.name(alias), this);
    }

    @Override
    public Contact as(Name alias) {
        return new Contact(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Contact rename(String name) {
        return new Contact(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Contact rename(Name name) {
        return new Contact(name, null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<Integer, String, String, String, String, String, String, String, String, Integer, String, String, String, String, LocalDateTime, LocalDateTime, Integer> fieldsRow() {
        return (Row17) super.fieldsRow();
    }
}
