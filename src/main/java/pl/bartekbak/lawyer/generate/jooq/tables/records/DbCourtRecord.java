/*
 * This file is generated by jOOQ.
 */
package pl.bartekbak.lawyer.generate.jooq.tables.records;


import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import pl.bartekbak.lawyer.generate.jooq.tables.DbCourt;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DbCourtRecord extends UpdatableRecordImpl<DbCourtRecord> implements Record4<UUID, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.db_court.court_id</code>.
     */
    public void setCourtId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.db_court.court_id</code>.
     */
    public UUID getCourtId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.db_court.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.db_court.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.db_court.description</code>.
     */
    public void setDescription(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.db_court.description</code>.
     */
    public String getDescription() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.db_court.phone</code>.
     */
    public void setPhone(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.db_court.phone</code>.
     */
    public String getPhone() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UUID, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return DbCourt.DB_COURT.COURT_ID;
    }

    @Override
    public Field<String> field2() {
        return DbCourt.DB_COURT.NAME;
    }

    @Override
    public Field<String> field3() {
        return DbCourt.DB_COURT.DESCRIPTION;
    }

    @Override
    public Field<String> field4() {
        return DbCourt.DB_COURT.PHONE;
    }

    @Override
    public UUID component1() {
        return getCourtId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getDescription();
    }

    @Override
    public String component4() {
        return getPhone();
    }

    @Override
    public UUID value1() {
        return getCourtId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getDescription();
    }

    @Override
    public String value4() {
        return getPhone();
    }

    @Override
    public DbCourtRecord value1(UUID value) {
        setCourtId(value);
        return this;
    }

    @Override
    public DbCourtRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public DbCourtRecord value3(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public DbCourtRecord value4(String value) {
        setPhone(value);
        return this;
    }

    @Override
    public DbCourtRecord values(UUID value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DbCourtRecord
     */
    public DbCourtRecord() {
        super(DbCourt.DB_COURT);
    }

    /**
     * Create a detached, initialised DbCourtRecord
     */
    public DbCourtRecord(UUID courtId, String name, String description, String phone) {
        super(DbCourt.DB_COURT);

        setCourtId(courtId);
        setName(name);
        setDescription(description);
        setPhone(phone);
    }
}
