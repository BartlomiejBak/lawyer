/*
 * This file is generated by jOOQ.
 */
package pl.bartekbak.lawyer.generate.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.bartekbak.lawyer.generate.jooq.Keys;
import pl.bartekbak.lawyer.generate.jooq.Public;
import pl.bartekbak.lawyer.generate.jooq.tables.records.DbContactRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DbContact extends TableImpl<DbContactRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.db_contact</code>
     */
    public static final DbContact DB_CONTACT = new DbContact();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DbContactRecord> getRecordType() {
        return DbContactRecord.class;
    }

    /**
     * The column <code>public.db_contact.contact_id</code>.
     */
    public final TableField<DbContactRecord, Integer> CONTACT_ID = createField(DSL.name("contact_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.db_contact.name</code>.
     */
    public final TableField<DbContactRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>public.db_contact.first_name</code>.
     */
    public final TableField<DbContactRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>public.db_contact.last_name</code>.
     */
    public final TableField<DbContactRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>public.db_contact.email</code>.
     */
    public final TableField<DbContactRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>public.db_contact.alt_email</code>.
     */
    public final TableField<DbContactRecord, String> ALT_EMAIL = createField(DSL.name("alt_email"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>public.db_contact.phone</code>.
     */
    public final TableField<DbContactRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.db_contact.alt_phone</code>.
     */
    public final TableField<DbContactRecord, String> ALT_PHONE = createField(DSL.name("alt_phone"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.db_contact.pesel</code>.
     */
    public final TableField<DbContactRecord, String> PESEL = createField(DSL.name("pesel"), SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>public.db_contact.address</code>.
     */
    public final TableField<DbContactRecord, Integer> ADDRESS = createField(DSL.name("address"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.db_contact.company_name</code>.
     */
    public final TableField<DbContactRecord, String> COMPANY_NAME = createField(DSL.name("company_name"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>public.db_contact.nip</code>.
     */
    public final TableField<DbContactRecord, String> NIP = createField(DSL.name("nip"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.db_contact.regon</code>.
     */
    public final TableField<DbContactRecord, String> REGON = createField(DSL.name("regon"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.db_contact.krs</code>.
     */
    public final TableField<DbContactRecord, String> KRS = createField(DSL.name("krs"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.db_contact.date_created</code>.
     */
    public final TableField<DbContactRecord, LocalDateTime> DATE_CREATED = createField(DSL.name("date_created"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.db_contact.modified</code>.
     */
    public final TableField<DbContactRecord, LocalDateTime> MODIFIED = createField(DSL.name("modified"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.db_contact.secondary_address</code>.
     */
    public final TableField<DbContactRecord, Integer> SECONDARY_ADDRESS = createField(DSL.name("secondary_address"), SQLDataType.INTEGER, this, "");

    private DbContact(Name alias, Table<DbContactRecord> aliased) {
        this(alias, aliased, null);
    }

    private DbContact(Name alias, Table<DbContactRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.db_contact</code> table reference
     */
    public DbContact(String alias) {
        this(DSL.name(alias), DB_CONTACT);
    }

    /**
     * Create an aliased <code>public.db_contact</code> table reference
     */
    public DbContact(Name alias) {
        this(alias, DB_CONTACT);
    }

    /**
     * Create a <code>public.db_contact</code> table reference
     */
    public DbContact() {
        this(DSL.name("db_contact"), null);
    }

    public <O extends Record> DbContact(Table<O> child, ForeignKey<O, DbContactRecord> key) {
        super(child, key, DB_CONTACT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<DbContactRecord, Integer> getIdentity() {
        return (Identity<DbContactRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DbContactRecord> getPrimaryKey() {
        return Keys.CONTACT_PKEY;
    }

    @Override
    public List<ForeignKey<DbContactRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DB_CONTACT__CONTACT_ADDRESS_FKEY, Keys.DB_CONTACT__CONTACT_SECONDARY_ADDRESS_FKEY);
    }

    private transient DbAddress _contactAddressFkey;
    private transient DbAddress _contactSecondaryAddressFkey;

    public DbAddress contactAddressFkey() {
        if (_contactAddressFkey == null)
            _contactAddressFkey = new DbAddress(this, Keys.DB_CONTACT__CONTACT_ADDRESS_FKEY);

        return _contactAddressFkey;
    }

    public DbAddress contactSecondaryAddressFkey() {
        if (_contactSecondaryAddressFkey == null)
            _contactSecondaryAddressFkey = new DbAddress(this, Keys.DB_CONTACT__CONTACT_SECONDARY_ADDRESS_FKEY);

        return _contactSecondaryAddressFkey;
    }

    @Override
    public DbContact as(String alias) {
        return new DbContact(DSL.name(alias), this);
    }

    @Override
    public DbContact as(Name alias) {
        return new DbContact(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DbContact rename(String name) {
        return new DbContact(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DbContact rename(Name name) {
        return new DbContact(name, null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<Integer, String, String, String, String, String, String, String, String, Integer, String, String, String, String, LocalDateTime, LocalDateTime, Integer> fieldsRow() {
        return (Row17) super.fieldsRow();
    }
}
