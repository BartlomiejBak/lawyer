/*
 * This file is generated by jOOQ.
 */
package pl.bartekbak.lawyer.generate.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.bartekbak.lawyer.generate.jooq.Keys;
import pl.bartekbak.lawyer.generate.jooq.Public;
import pl.bartekbak.lawyer.generate.jooq.tables.records.LawsuitContactRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LawsuitContact extends TableImpl<LawsuitContactRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lawsuit_contact</code>
     */
    public static final LawsuitContact LAWSUIT_CONTACT = new LawsuitContact();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LawsuitContactRecord> getRecordType() {
        return LawsuitContactRecord.class;
    }

    /**
     * The column <code>public.lawsuit_contact.id</code>.
     */
    public final TableField<LawsuitContactRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.lawsuit_contact.contact</code>.
     */
    public final TableField<LawsuitContactRecord, Integer> CONTACT = createField(DSL.name("contact"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lawsuit_contact.lawsuit</code>.
     */
    public final TableField<LawsuitContactRecord, Integer> LAWSUIT = createField(DSL.name("lawsuit"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.lawsuit_contact.role</code>.
     */
    public final TableField<LawsuitContactRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR(25), this, "");

    private LawsuitContact(Name alias, Table<LawsuitContactRecord> aliased) {
        this(alias, aliased, null);
    }

    private LawsuitContact(Name alias, Table<LawsuitContactRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.lawsuit_contact</code> table reference
     */
    public LawsuitContact(String alias) {
        this(DSL.name(alias), LAWSUIT_CONTACT);
    }

    /**
     * Create an aliased <code>public.lawsuit_contact</code> table reference
     */
    public LawsuitContact(Name alias) {
        this(alias, LAWSUIT_CONTACT);
    }

    /**
     * Create a <code>public.lawsuit_contact</code> table reference
     */
    public LawsuitContact() {
        this(DSL.name("lawsuit_contact"), null);
    }

    public <O extends Record> LawsuitContact(Table<O> child, ForeignKey<O, LawsuitContactRecord> key) {
        super(child, key, LAWSUIT_CONTACT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<LawsuitContactRecord, Integer> getIdentity() {
        return (Identity<LawsuitContactRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<LawsuitContactRecord> getPrimaryKey() {
        return Keys.LAWSUIT_CONTACT_PKEY;
    }

    @Override
    public List<ForeignKey<LawsuitContactRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LAWSUIT_CONTACT__LAWSUIT_CONTACT_CONTACT_FKEY, Keys.LAWSUIT_CONTACT__LAWSUIT_CONTACT_LAWSUIT_FKEY);
    }

    private transient Contact _contact;
    private transient Lawsuit _lawsuit;

    public Contact contact() {
        if (_contact == null)
            _contact = new Contact(this, Keys.LAWSUIT_CONTACT__LAWSUIT_CONTACT_CONTACT_FKEY);

        return _contact;
    }

    public Lawsuit lawsuit() {
        if (_lawsuit == null)
            _lawsuit = new Lawsuit(this, Keys.LAWSUIT_CONTACT__LAWSUIT_CONTACT_LAWSUIT_FKEY);

        return _lawsuit;
    }

    @Override
    public LawsuitContact as(String alias) {
        return new LawsuitContact(DSL.name(alias), this);
    }

    @Override
    public LawsuitContact as(Name alias) {
        return new LawsuitContact(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LawsuitContact rename(String name) {
        return new LawsuitContact(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LawsuitContact rename(Name name) {
        return new LawsuitContact(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
