/*
 * This file is generated by jOOQ.
 */
package pl.bartekbak.lawyer.generate.jooq.tables;


import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.bartekbak.lawyer.generate.jooq.Keys;
import pl.bartekbak.lawyer.generate.jooq.Public;
import pl.bartekbak.lawyer.generate.jooq.tables.records.LawsuitRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Lawsuit extends TableImpl<LawsuitRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lawsuit</code>
     */
    public static final Lawsuit LAWSUIT = new Lawsuit();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LawsuitRecord> getRecordType() {
        return LawsuitRecord.class;
    }

    /**
     * The column <code>public.lawsuit.lawsuit_id</code>.
     */
    public final TableField<LawsuitRecord, Integer> LAWSUIT_ID = createField(DSL.name("lawsuit_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.lawsuit.name</code>.
     */
    public final TableField<LawsuitRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.lawsuit.cas_side</code>.
     */
    public final TableField<LawsuitRecord, String> CAS_SIDE = createField(DSL.name("cas_side"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.lawsuit.input_date</code>.
     */
    public final TableField<LawsuitRecord, LocalDate> INPUT_DATE = createField(DSL.name("input_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.lawsuit.deadline</code>.
     */
    public final TableField<LawsuitRecord, LocalDate> DEADLINE = createField(DSL.name("deadline"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.lawsuit.signature</code>.
     */
    public final TableField<LawsuitRecord, String> SIGNATURE = createField(DSL.name("signature"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.lawsuit.claim_amount</code>.
     */
    public final TableField<LawsuitRecord, Double> CLAIM_AMOUNT = createField(DSL.name("claim_amount"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.lawsuit.add_info</code>.
     */
    public final TableField<LawsuitRecord, String> ADD_INFO = createField(DSL.name("add_info"), SQLDataType.VARCHAR(500), this, "");

    private Lawsuit(Name alias, Table<LawsuitRecord> aliased) {
        this(alias, aliased, null);
    }

    private Lawsuit(Name alias, Table<LawsuitRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.lawsuit</code> table reference
     */
    public Lawsuit(String alias) {
        this(DSL.name(alias), LAWSUIT);
    }

    /**
     * Create an aliased <code>public.lawsuit</code> table reference
     */
    public Lawsuit(Name alias) {
        this(alias, LAWSUIT);
    }

    /**
     * Create a <code>public.lawsuit</code> table reference
     */
    public Lawsuit() {
        this(DSL.name("lawsuit"), null);
    }

    public <O extends Record> Lawsuit(Table<O> child, ForeignKey<O, LawsuitRecord> key) {
        super(child, key, LAWSUIT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<LawsuitRecord, Integer> getIdentity() {
        return (Identity<LawsuitRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<LawsuitRecord> getPrimaryKey() {
        return Keys.LAWSUIT_PKEY;
    }

    @Override
    public Lawsuit as(String alias) {
        return new Lawsuit(DSL.name(alias), this);
    }

    @Override
    public Lawsuit as(Name alias) {
        return new Lawsuit(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Lawsuit rename(String name) {
        return new Lawsuit(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lawsuit rename(Name name) {
        return new Lawsuit(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, LocalDate, LocalDate, String, Double, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
