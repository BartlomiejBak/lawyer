/*
 * This file is generated by jOOQ.
 */
package pl.bartekbak.lawyer.generate.jooq.tables;


import java.time.LocalDate;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.bartekbak.lawyer.generate.jooq.Keys;
import pl.bartekbak.lawyer.generate.jooq.Public;
import pl.bartekbak.lawyer.generate.jooq.tables.records.DbPaymentRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DbPayment extends TableImpl<DbPaymentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.db_payment</code>
     */
    public static final DbPayment DB_PAYMENT = new DbPayment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DbPaymentRecord> getRecordType() {
        return DbPaymentRecord.class;
    }

    /**
     * The column <code>public.db_payment.payment_id</code>.
     */
    public final TableField<DbPaymentRecord, UUID> PAYMENT_ID = createField(DSL.name("payment_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.db_payment.payment_value</code>.
     */
    public final TableField<DbPaymentRecord, Double> PAYMENT_VALUE = createField(DSL.name("payment_value"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.db_payment.payment_date</code>.
     */
    public final TableField<DbPaymentRecord, LocalDate> PAYMENT_DATE = createField(DSL.name("payment_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.db_payment.paid</code>.
     */
    public final TableField<DbPaymentRecord, Boolean> PAID = createField(DSL.name("paid"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.db_payment.paid_date</code>.
     */
    public final TableField<DbPaymentRecord, LocalDate> PAID_DATE = createField(DSL.name("paid_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.db_payment.comment</code>.
     */
    public final TableField<DbPaymentRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.db_payment.us</code>.
     */
    public final TableField<DbPaymentRecord, Boolean> US = createField(DSL.name("us"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.db_payment.incoming</code>.
     */
    public final TableField<DbPaymentRecord, Boolean> INCOMING = createField(DSL.name("incoming"), SQLDataType.BOOLEAN, this, "");

    private DbPayment(Name alias, Table<DbPaymentRecord> aliased) {
        this(alias, aliased, null);
    }

    private DbPayment(Name alias, Table<DbPaymentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.db_payment</code> table reference
     */
    public DbPayment(String alias) {
        this(DSL.name(alias), DB_PAYMENT);
    }

    /**
     * Create an aliased <code>public.db_payment</code> table reference
     */
    public DbPayment(Name alias) {
        this(alias, DB_PAYMENT);
    }

    /**
     * Create a <code>public.db_payment</code> table reference
     */
    public DbPayment() {
        this(DSL.name("db_payment"), null);
    }

    public <O extends Record> DbPayment(Table<O> child, ForeignKey<O, DbPaymentRecord> key) {
        super(child, key, DB_PAYMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<DbPaymentRecord> getPrimaryKey() {
        return Keys.PAYMENT_PKEY;
    }

    @Override
    public DbPayment as(String alias) {
        return new DbPayment(DSL.name(alias), this);
    }

    @Override
    public DbPayment as(Name alias) {
        return new DbPayment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DbPayment rename(String name) {
        return new DbPayment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DbPayment rename(Name name) {
        return new DbPayment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, Double, LocalDate, Boolean, LocalDate, String, Boolean, Boolean> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
