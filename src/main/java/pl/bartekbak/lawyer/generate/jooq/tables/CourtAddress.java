/*
 * This file is generated by jOOQ.
 */
package pl.bartekbak.lawyer.generate.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.bartekbak.lawyer.generate.jooq.Keys;
import pl.bartekbak.lawyer.generate.jooq.Public;
import pl.bartekbak.lawyer.generate.jooq.tables.records.CourtAddressRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CourtAddress extends TableImpl<CourtAddressRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.court_address</code>
     */
    public static final CourtAddress COURT_ADDRESS = new CourtAddress();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CourtAddressRecord> getRecordType() {
        return CourtAddressRecord.class;
    }

    /**
     * The column <code>public.court_address.id</code>.
     */
    public final TableField<CourtAddressRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.court_address.address</code>.
     */
    public final TableField<CourtAddressRecord, Integer> ADDRESS = createField(DSL.name("address"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.court_address.contact</code>.
     */
    public final TableField<CourtAddressRecord, Integer> CONTACT = createField(DSL.name("contact"), SQLDataType.INTEGER, this, "");

    private CourtAddress(Name alias, Table<CourtAddressRecord> aliased) {
        this(alias, aliased, null);
    }

    private CourtAddress(Name alias, Table<CourtAddressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.court_address</code> table reference
     */
    public CourtAddress(String alias) {
        this(DSL.name(alias), COURT_ADDRESS);
    }

    /**
     * Create an aliased <code>public.court_address</code> table reference
     */
    public CourtAddress(Name alias) {
        this(alias, COURT_ADDRESS);
    }

    /**
     * Create a <code>public.court_address</code> table reference
     */
    public CourtAddress() {
        this(DSL.name("court_address"), null);
    }

    public <O extends Record> CourtAddress(Table<O> child, ForeignKey<O, CourtAddressRecord> key) {
        super(child, key, COURT_ADDRESS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CourtAddressRecord, Integer> getIdentity() {
        return (Identity<CourtAddressRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CourtAddressRecord> getPrimaryKey() {
        return Keys.COURT_ADDRESS_PKEY;
    }

    @Override
    public List<ForeignKey<CourtAddressRecord, ?>> getReferences() {
        return Arrays.asList(Keys.COURT_ADDRESS__COURT_ADDRESS_ADDRESS_FKEY, Keys.COURT_ADDRESS__COURT_ADDRESS_CONTACT_FKEY);
    }

    private transient Address _address;
    private transient Court _court;

    public Address address() {
        if (_address == null)
            _address = new Address(this, Keys.COURT_ADDRESS__COURT_ADDRESS_ADDRESS_FKEY);

        return _address;
    }

    public Court court() {
        if (_court == null)
            _court = new Court(this, Keys.COURT_ADDRESS__COURT_ADDRESS_CONTACT_FKEY);

        return _court;
    }

    @Override
    public CourtAddress as(String alias) {
        return new CourtAddress(DSL.name(alias), this);
    }

    @Override
    public CourtAddress as(Name alias) {
        return new CourtAddress(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CourtAddress rename(String name) {
        return new CourtAddress(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CourtAddress rename(Name name) {
        return new CourtAddress(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
