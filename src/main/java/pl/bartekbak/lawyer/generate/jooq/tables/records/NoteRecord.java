/*
 * This file is generated by jOOQ.
 */
package pl.bartekbak.lawyer.generate.jooq.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import pl.bartekbak.lawyer.generate.jooq.tables.Note;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NoteRecord extends UpdatableRecordImpl<NoteRecord> implements Record3<Integer, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.note.note_id</code>.
     */
    public void setNoteId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.note.note_id</code>.
     */
    public Integer getNoteId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.note.title</code>.
     */
    public void setTitle(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.note.title</code>.
     */
    public String getTitle() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.note.text</code>.
     */
    public void setText(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.note.text</code>.
     */
    public String getText() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Note.NOTE.NOTE_ID;
    }

    @Override
    public Field<String> field2() {
        return Note.NOTE.TITLE;
    }

    @Override
    public Field<String> field3() {
        return Note.NOTE.TEXT;
    }

    @Override
    public Integer component1() {
        return getNoteId();
    }

    @Override
    public String component2() {
        return getTitle();
    }

    @Override
    public String component3() {
        return getText();
    }

    @Override
    public Integer value1() {
        return getNoteId();
    }

    @Override
    public String value2() {
        return getTitle();
    }

    @Override
    public String value3() {
        return getText();
    }

    @Override
    public NoteRecord value1(Integer value) {
        setNoteId(value);
        return this;
    }

    @Override
    public NoteRecord value2(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public NoteRecord value3(String value) {
        setText(value);
        return this;
    }

    @Override
    public NoteRecord values(Integer value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached NoteRecord
     */
    public NoteRecord() {
        super(Note.NOTE);
    }

    /**
     * Create a detached, initialised NoteRecord
     */
    public NoteRecord(Integer noteId, String title, String text) {
        super(Note.NOTE);

        setNoteId(noteId);
        setTitle(title);
        setText(text);
    }
}
