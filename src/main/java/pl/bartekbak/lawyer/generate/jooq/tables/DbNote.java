/*
 * This file is generated by jOOQ.
 */
package pl.bartekbak.lawyer.generate.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.bartekbak.lawyer.generate.jooq.Keys;
import pl.bartekbak.lawyer.generate.jooq.Public;
import pl.bartekbak.lawyer.generate.jooq.tables.records.DbNoteRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DbNote extends TableImpl<DbNoteRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.db_note</code>
     */
    public static final DbNote DB_NOTE = new DbNote();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DbNoteRecord> getRecordType() {
        return DbNoteRecord.class;
    }

    /**
     * The column <code>public.db_note.note_id</code>.
     */
    public final TableField<DbNoteRecord, UUID> NOTE_ID = createField(DSL.name("note_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.db_note.title</code>.
     */
    public final TableField<DbNoteRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(55), this, "");

    /**
     * The column <code>public.db_note.text</code>.
     */
    public final TableField<DbNoteRecord, String> TEXT = createField(DSL.name("text"), SQLDataType.VARCHAR(5000), this, "");

    private DbNote(Name alias, Table<DbNoteRecord> aliased) {
        this(alias, aliased, null);
    }

    private DbNote(Name alias, Table<DbNoteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.db_note</code> table reference
     */
    public DbNote(String alias) {
        this(DSL.name(alias), DB_NOTE);
    }

    /**
     * Create an aliased <code>public.db_note</code> table reference
     */
    public DbNote(Name alias) {
        this(alias, DB_NOTE);
    }

    /**
     * Create a <code>public.db_note</code> table reference
     */
    public DbNote() {
        this(DSL.name("db_note"), null);
    }

    public <O extends Record> DbNote(Table<O> child, ForeignKey<O, DbNoteRecord> key) {
        super(child, key, DB_NOTE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<DbNoteRecord> getPrimaryKey() {
        return Keys.NOTE_PKEY;
    }

    @Override
    public List<UniqueKey<DbNoteRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UNIQUE_NOTE);
    }

    @Override
    public DbNote as(String alias) {
        return new DbNote(DSL.name(alias), this);
    }

    @Override
    public DbNote as(Name alias) {
        return new DbNote(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DbNote rename(String name) {
        return new DbNote(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DbNote rename(Name name) {
        return new DbNote(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
