/*
 * This file is generated by jOOQ.
 */
package pl.bartekbak.lawyer.generate.jooq.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import pl.bartekbak.lawyer.generate.jooq.tables.DbContactAddress;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DbContactAddressRecord extends UpdatableRecordImpl<DbContactAddressRecord> implements Record4<Integer, Integer, Integer, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.db_contact_address.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.db_contact_address.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.db_contact_address.address</code>.
     */
    public void setAddress(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.db_contact_address.address</code>.
     */
    public Integer getAddress() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.db_contact_address.contact</code>.
     */
    public void setContact(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.db_contact_address.contact</code>.
     */
    public Integer getContact() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.db_contact_address.type</code>.
     */
    public void setType(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.db_contact_address.type</code>.
     */
    public String getType() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, Integer, Integer, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return DbContactAddress.DB_CONTACT_ADDRESS.ID;
    }

    @Override
    public Field<Integer> field2() {
        return DbContactAddress.DB_CONTACT_ADDRESS.ADDRESS;
    }

    @Override
    public Field<Integer> field3() {
        return DbContactAddress.DB_CONTACT_ADDRESS.CONTACT;
    }

    @Override
    public Field<String> field4() {
        return DbContactAddress.DB_CONTACT_ADDRESS.TYPE;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getAddress();
    }

    @Override
    public Integer component3() {
        return getContact();
    }

    @Override
    public String component4() {
        return getType();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getAddress();
    }

    @Override
    public Integer value3() {
        return getContact();
    }

    @Override
    public String value4() {
        return getType();
    }

    @Override
    public DbContactAddressRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public DbContactAddressRecord value2(Integer value) {
        setAddress(value);
        return this;
    }

    @Override
    public DbContactAddressRecord value3(Integer value) {
        setContact(value);
        return this;
    }

    @Override
    public DbContactAddressRecord value4(String value) {
        setType(value);
        return this;
    }

    @Override
    public DbContactAddressRecord values(Integer value1, Integer value2, Integer value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DbContactAddressRecord
     */
    public DbContactAddressRecord() {
        super(DbContactAddress.DB_CONTACT_ADDRESS);
    }

    /**
     * Create a detached, initialised DbContactAddressRecord
     */
    public DbContactAddressRecord(Integer id, Integer address, Integer contact, String type) {
        super(DbContactAddress.DB_CONTACT_ADDRESS);

        setId(id);
        setAddress(address);
        setContact(contact);
        setType(type);
    }
}
