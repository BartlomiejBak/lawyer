/*
 * This file is generated by jOOQ.
 */
package pl.bartekbak.lawyer.generate.jooq.tables;


import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.bartekbak.lawyer.generate.jooq.Keys;
import pl.bartekbak.lawyer.generate.jooq.Public;
import pl.bartekbak.lawyer.generate.jooq.tables.records.PaymentRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Payment extends TableImpl<PaymentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.payment</code>
     */
    public static final Payment PAYMENT = new Payment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaymentRecord> getRecordType() {
        return PaymentRecord.class;
    }

    /**
     * The column <code>public.payment.payment_id</code>.
     */
    public final TableField<PaymentRecord, Integer> PAYMENT_ID = createField(DSL.name("payment_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.payment.payment_value</code>.
     */
    public final TableField<PaymentRecord, Double> PAYMENT_VALUE = createField(DSL.name("payment_value"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.payment.payment_date</code>.
     */
    public final TableField<PaymentRecord, LocalDate> PAYMENT_DATE = createField(DSL.name("payment_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.payment.paid</code>.
     */
    public final TableField<PaymentRecord, Boolean> PAID = createField(DSL.name("paid"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.payment.paid_date</code>.
     */
    public final TableField<PaymentRecord, LocalDate> PAID_DATE = createField(DSL.name("paid_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.payment.comment</code>.
     */
    public final TableField<PaymentRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.payment.us</code>.
     */
    public final TableField<PaymentRecord, Boolean> US = createField(DSL.name("us"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.payment.incoming</code>.
     */
    public final TableField<PaymentRecord, Boolean> INCOMING = createField(DSL.name("incoming"), SQLDataType.BOOLEAN, this, "");

    private Payment(Name alias, Table<PaymentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Payment(Name alias, Table<PaymentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.payment</code> table reference
     */
    public Payment(String alias) {
        this(DSL.name(alias), PAYMENT);
    }

    /**
     * Create an aliased <code>public.payment</code> table reference
     */
    public Payment(Name alias) {
        this(alias, PAYMENT);
    }

    /**
     * Create a <code>public.payment</code> table reference
     */
    public Payment() {
        this(DSL.name("payment"), null);
    }

    public <O extends Record> Payment(Table<O> child, ForeignKey<O, PaymentRecord> key) {
        super(child, key, PAYMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<PaymentRecord, Integer> getIdentity() {
        return (Identity<PaymentRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PaymentRecord> getPrimaryKey() {
        return Keys.PAYMENT_PKEY;
    }

    @Override
    public Payment as(String alias) {
        return new Payment(DSL.name(alias), this);
    }

    @Override
    public Payment as(Name alias) {
        return new Payment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Payment rename(String name) {
        return new Payment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Payment rename(Name name) {
        return new Payment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Double, LocalDate, Boolean, LocalDate, String, Boolean, Boolean> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
