/*
 * This file is generated by jOOQ.
 */
package pl.bartekbak.lawyer.generate.jooq.tables;


import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.bartekbak.lawyer.generate.jooq.Keys;
import pl.bartekbak.lawyer.generate.jooq.Public;
import pl.bartekbak.lawyer.generate.jooq.tables.records.PoaRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Poa extends TableImpl<PoaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.poa</code>
     */
    public static final Poa POA = new Poa();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PoaRecord> getRecordType() {
        return PoaRecord.class;
    }

    /**
     * The column <code>public.poa.poa_id</code>.
     */
    public final TableField<PoaRecord, Integer> POA_ID = createField(DSL.name("poa_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.poa.type</code>.
     */
    public final TableField<PoaRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.poa.payment</code>.
     */
    public final TableField<PoaRecord, String> PAYMENT = createField(DSL.name("payment"), SQLDataType.VARCHAR(150), this, "");

    /**
     * The column <code>public.poa.kpc</code>.
     */
    public final TableField<PoaRecord, Boolean> KPC = createField(DSL.name("kpc"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.poa.termination</code>.
     */
    public final TableField<PoaRecord, Boolean> TERMINATION = createField(DSL.name("termination"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.poa.start_date</code>.
     */
    public final TableField<PoaRecord, LocalDate> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.poa.end_date</code>.
     */
    public final TableField<PoaRecord, LocalDate> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.poa.notification_duty</code>.
     */
    public final TableField<PoaRecord, Boolean> NOTIFICATION_DUTY = createField(DSL.name("notification_duty"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.poa.duty_completed</code>.
     */
    public final TableField<PoaRecord, Boolean> DUTY_COMPLETED = createField(DSL.name("duty_completed"), SQLDataType.BOOLEAN, this, "");

    private Poa(Name alias, Table<PoaRecord> aliased) {
        this(alias, aliased, null);
    }

    private Poa(Name alias, Table<PoaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.poa</code> table reference
     */
    public Poa(String alias) {
        this(DSL.name(alias), POA);
    }

    /**
     * Create an aliased <code>public.poa</code> table reference
     */
    public Poa(Name alias) {
        this(alias, POA);
    }

    /**
     * Create a <code>public.poa</code> table reference
     */
    public Poa() {
        this(DSL.name("poa"), null);
    }

    public <O extends Record> Poa(Table<O> child, ForeignKey<O, PoaRecord> key) {
        super(child, key, POA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<PoaRecord, Integer> getIdentity() {
        return (Identity<PoaRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PoaRecord> getPrimaryKey() {
        return Keys.POA_PKEY;
    }

    @Override
    public Poa as(String alias) {
        return new Poa(DSL.name(alias), this);
    }

    @Override
    public Poa as(Name alias) {
        return new Poa(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Poa rename(String name) {
        return new Poa(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Poa rename(Name name) {
        return new Poa(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, String, Boolean, Boolean, LocalDate, LocalDate, Boolean, Boolean> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
