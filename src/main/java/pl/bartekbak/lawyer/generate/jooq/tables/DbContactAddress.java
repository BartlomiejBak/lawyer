/*
 * This file is generated by jOOQ.
 */
package pl.bartekbak.lawyer.generate.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.bartekbak.lawyer.generate.jooq.Keys;
import pl.bartekbak.lawyer.generate.jooq.Public;
import pl.bartekbak.lawyer.generate.jooq.tables.records.DbContactAddressRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DbContactAddress extends TableImpl<DbContactAddressRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.db_contact_address</code>
     */
    public static final DbContactAddress DB_CONTACT_ADDRESS = new DbContactAddress();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DbContactAddressRecord> getRecordType() {
        return DbContactAddressRecord.class;
    }

    /**
     * The column <code>public.db_contact_address.id</code>.
     */
    public final TableField<DbContactAddressRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("gen_random_uuid()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.db_contact_address.address</code>.
     */
    public final TableField<DbContactAddressRecord, UUID> ADDRESS = createField(DSL.name("address"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.db_contact_address.contact</code>.
     */
    public final TableField<DbContactAddressRecord, UUID> CONTACT = createField(DSL.name("contact"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.db_contact_address.type</code>.
     */
    public final TableField<DbContactAddressRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(32).nullable(false).defaultValue(DSL.field("'primary'::character varying", SQLDataType.VARCHAR)), this, "");

    private DbContactAddress(Name alias, Table<DbContactAddressRecord> aliased) {
        this(alias, aliased, null);
    }

    private DbContactAddress(Name alias, Table<DbContactAddressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.db_contact_address</code> table reference
     */
    public DbContactAddress(String alias) {
        this(DSL.name(alias), DB_CONTACT_ADDRESS);
    }

    /**
     * Create an aliased <code>public.db_contact_address</code> table reference
     */
    public DbContactAddress(Name alias) {
        this(alias, DB_CONTACT_ADDRESS);
    }

    /**
     * Create a <code>public.db_contact_address</code> table reference
     */
    public DbContactAddress() {
        this(DSL.name("db_contact_address"), null);
    }

    public <O extends Record> DbContactAddress(Table<O> child, ForeignKey<O, DbContactAddressRecord> key) {
        super(child, key, DB_CONTACT_ADDRESS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<DbContactAddressRecord> getPrimaryKey() {
        return Keys.CONTACT_ADDRESS_PKEY;
    }

    @Override
    public List<ForeignKey<DbContactAddressRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DB_CONTACT_ADDRESS__CONTACT_ADDRESS_ADDRESS_FKEY, Keys.DB_CONTACT_ADDRESS__CONTACT_ADDRESS_CONTACT_FKEY);
    }

    private transient DbAddress _dbAddress;
    private transient DbContact _dbContact;

    public DbAddress dbAddress() {
        if (_dbAddress == null)
            _dbAddress = new DbAddress(this, Keys.DB_CONTACT_ADDRESS__CONTACT_ADDRESS_ADDRESS_FKEY);

        return _dbAddress;
    }

    public DbContact dbContact() {
        if (_dbContact == null)
            _dbContact = new DbContact(this, Keys.DB_CONTACT_ADDRESS__CONTACT_ADDRESS_CONTACT_FKEY);

        return _dbContact;
    }

    @Override
    public DbContactAddress as(String alias) {
        return new DbContactAddress(DSL.name(alias), this);
    }

    @Override
    public DbContactAddress as(Name alias) {
        return new DbContactAddress(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DbContactAddress rename(String name) {
        return new DbContactAddress(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DbContactAddress rename(Name name) {
        return new DbContactAddress(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, UUID, UUID, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
