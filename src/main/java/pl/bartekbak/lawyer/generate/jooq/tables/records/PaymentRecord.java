/*
 * This file is generated by jOOQ.
 */
package pl.bartekbak.lawyer.generate.jooq.tables.records;


import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;

import pl.bartekbak.lawyer.generate.jooq.tables.Payment;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PaymentRecord extends UpdatableRecordImpl<PaymentRecord> implements Record8<Integer, Double, LocalDate, Boolean, LocalDate, String, Boolean, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.payment.payment_id</code>.
     */
    public void setPaymentId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.payment.payment_id</code>.
     */
    public Integer getPaymentId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.payment.payment_value</code>.
     */
    public void setPaymentValue(Double value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.payment.payment_value</code>.
     */
    public Double getPaymentValue() {
        return (Double) get(1);
    }

    /**
     * Setter for <code>public.payment.payment_date</code>.
     */
    public void setPaymentDate(LocalDate value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.payment.payment_date</code>.
     */
    public LocalDate getPaymentDate() {
        return (LocalDate) get(2);
    }

    /**
     * Setter for <code>public.payment.paid</code>.
     */
    public void setPaid(Boolean value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.payment.paid</code>.
     */
    public Boolean getPaid() {
        return (Boolean) get(3);
    }

    /**
     * Setter for <code>public.payment.paid_date</code>.
     */
    public void setPaidDate(LocalDate value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.payment.paid_date</code>.
     */
    public LocalDate getPaidDate() {
        return (LocalDate) get(4);
    }

    /**
     * Setter for <code>public.payment.comment</code>.
     */
    public void setComment(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.payment.comment</code>.
     */
    public String getComment() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.payment.us</code>.
     */
    public void setUs(Boolean value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.payment.us</code>.
     */
    public Boolean getUs() {
        return (Boolean) get(6);
    }

    /**
     * Setter for <code>public.payment.incoming</code>.
     */
    public void setIncoming(Boolean value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.payment.incoming</code>.
     */
    public Boolean getIncoming() {
        return (Boolean) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Double, LocalDate, Boolean, LocalDate, String, Boolean, Boolean> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Integer, Double, LocalDate, Boolean, LocalDate, String, Boolean, Boolean> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Payment.PAYMENT.PAYMENT_ID;
    }

    @Override
    public Field<Double> field2() {
        return Payment.PAYMENT.PAYMENT_VALUE;
    }

    @Override
    public Field<LocalDate> field3() {
        return Payment.PAYMENT.PAYMENT_DATE;
    }

    @Override
    public Field<Boolean> field4() {
        return Payment.PAYMENT.PAID;
    }

    @Override
    public Field<LocalDate> field5() {
        return Payment.PAYMENT.PAID_DATE;
    }

    @Override
    public Field<String> field6() {
        return Payment.PAYMENT.COMMENT;
    }

    @Override
    public Field<Boolean> field7() {
        return Payment.PAYMENT.US;
    }

    @Override
    public Field<Boolean> field8() {
        return Payment.PAYMENT.INCOMING;
    }

    @Override
    public Integer component1() {
        return getPaymentId();
    }

    @Override
    public Double component2() {
        return getPaymentValue();
    }

    @Override
    public LocalDate component3() {
        return getPaymentDate();
    }

    @Override
    public Boolean component4() {
        return getPaid();
    }

    @Override
    public LocalDate component5() {
        return getPaidDate();
    }

    @Override
    public String component6() {
        return getComment();
    }

    @Override
    public Boolean component7() {
        return getUs();
    }

    @Override
    public Boolean component8() {
        return getIncoming();
    }

    @Override
    public Integer value1() {
        return getPaymentId();
    }

    @Override
    public Double value2() {
        return getPaymentValue();
    }

    @Override
    public LocalDate value3() {
        return getPaymentDate();
    }

    @Override
    public Boolean value4() {
        return getPaid();
    }

    @Override
    public LocalDate value5() {
        return getPaidDate();
    }

    @Override
    public String value6() {
        return getComment();
    }

    @Override
    public Boolean value7() {
        return getUs();
    }

    @Override
    public Boolean value8() {
        return getIncoming();
    }

    @Override
    public PaymentRecord value1(Integer value) {
        setPaymentId(value);
        return this;
    }

    @Override
    public PaymentRecord value2(Double value) {
        setPaymentValue(value);
        return this;
    }

    @Override
    public PaymentRecord value3(LocalDate value) {
        setPaymentDate(value);
        return this;
    }

    @Override
    public PaymentRecord value4(Boolean value) {
        setPaid(value);
        return this;
    }

    @Override
    public PaymentRecord value5(LocalDate value) {
        setPaidDate(value);
        return this;
    }

    @Override
    public PaymentRecord value6(String value) {
        setComment(value);
        return this;
    }

    @Override
    public PaymentRecord value7(Boolean value) {
        setUs(value);
        return this;
    }

    @Override
    public PaymentRecord value8(Boolean value) {
        setIncoming(value);
        return this;
    }

    @Override
    public PaymentRecord values(Integer value1, Double value2, LocalDate value3, Boolean value4, LocalDate value5, String value6, Boolean value7, Boolean value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PaymentRecord
     */
    public PaymentRecord() {
        super(Payment.PAYMENT);
    }

    /**
     * Create a detached, initialised PaymentRecord
     */
    public PaymentRecord(Integer paymentId, Double paymentValue, LocalDate paymentDate, Boolean paid, LocalDate paidDate, String comment, Boolean us, Boolean incoming) {
        super(Payment.PAYMENT);

        setPaymentId(paymentId);
        setPaymentValue(paymentValue);
        setPaymentDate(paymentDate);
        setPaid(paid);
        setPaidDate(paidDate);
        setComment(comment);
        setUs(us);
        setIncoming(incoming);
    }
}
