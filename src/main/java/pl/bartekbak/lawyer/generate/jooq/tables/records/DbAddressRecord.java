/*
 * This file is generated by jOOQ.
 */
package pl.bartekbak.lawyer.generate.jooq.tables.records;


import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;

import pl.bartekbak.lawyer.generate.jooq.tables.DbAddress;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DbAddressRecord extends UpdatableRecordImpl<DbAddressRecord> implements Record5<UUID, String, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.db_address.address_id</code>.
     */
    public void setAddressId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.db_address.address_id</code>.
     */
    public UUID getAddressId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.db_address.street</code>.
     */
    public void setStreet(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.db_address.street</code>.
     */
    public String getStreet() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.db_address.zip_code</code>.
     */
    public void setZipCode(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.db_address.zip_code</code>.
     */
    public String getZipCode() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.db_address.city</code>.
     */
    public void setCity(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.db_address.city</code>.
     */
    public String getCity() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.db_address.country</code>.
     */
    public void setCountry(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.db_address.country</code>.
     */
    public String getCountry() {
        return (String) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<UUID, String, String, String, String> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return DbAddress.DB_ADDRESS.ADDRESS_ID;
    }

    @Override
    public Field<String> field2() {
        return DbAddress.DB_ADDRESS.STREET;
    }

    @Override
    public Field<String> field3() {
        return DbAddress.DB_ADDRESS.ZIP_CODE;
    }

    @Override
    public Field<String> field4() {
        return DbAddress.DB_ADDRESS.CITY;
    }

    @Override
    public Field<String> field5() {
        return DbAddress.DB_ADDRESS.COUNTRY;
    }

    @Override
    public UUID component1() {
        return getAddressId();
    }

    @Override
    public String component2() {
        return getStreet();
    }

    @Override
    public String component3() {
        return getZipCode();
    }

    @Override
    public String component4() {
        return getCity();
    }

    @Override
    public String component5() {
        return getCountry();
    }

    @Override
    public UUID value1() {
        return getAddressId();
    }

    @Override
    public String value2() {
        return getStreet();
    }

    @Override
    public String value3() {
        return getZipCode();
    }

    @Override
    public String value4() {
        return getCity();
    }

    @Override
    public String value5() {
        return getCountry();
    }

    @Override
    public DbAddressRecord value1(UUID value) {
        setAddressId(value);
        return this;
    }

    @Override
    public DbAddressRecord value2(String value) {
        setStreet(value);
        return this;
    }

    @Override
    public DbAddressRecord value3(String value) {
        setZipCode(value);
        return this;
    }

    @Override
    public DbAddressRecord value4(String value) {
        setCity(value);
        return this;
    }

    @Override
    public DbAddressRecord value5(String value) {
        setCountry(value);
        return this;
    }

    @Override
    public DbAddressRecord values(UUID value1, String value2, String value3, String value4, String value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DbAddressRecord
     */
    public DbAddressRecord() {
        super(DbAddress.DB_ADDRESS);
    }

    /**
     * Create a detached, initialised DbAddressRecord
     */
    public DbAddressRecord(UUID addressId, String street, String zipCode, String city, String country) {
        super(DbAddress.DB_ADDRESS);

        setAddressId(addressId);
        setStreet(street);
        setZipCode(zipCode);
        setCity(city);
        setCountry(country);
    }
}
