/*
 * This file is generated by jOOQ.
 */
package pl.bartekbak.lawyer.generate.jooq.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pl.bartekbak.lawyer.generate.jooq.Keys;
import pl.bartekbak.lawyer.generate.jooq.Public;
import pl.bartekbak.lawyer.generate.jooq.tables.records.DbCourtRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DbCourt extends TableImpl<DbCourtRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.db_court</code>
     */
    public static final DbCourt DB_COURT = new DbCourt();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DbCourtRecord> getRecordType() {
        return DbCourtRecord.class;
    }

    /**
     * The column <code>public.db_court.court_id</code>.
     */
    public final TableField<DbCourtRecord, Integer> COURT_ID = createField(DSL.name("court_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.db_court.name</code>.
     */
    public final TableField<DbCourtRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(55), this, "");

    /**
     * The column <code>public.db_court.description</code>.
     */
    public final TableField<DbCourtRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>public.db_court.address</code>.
     */
    public final TableField<DbCourtRecord, Integer> ADDRESS = createField(DSL.name("address"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.db_court.phone</code>.
     */
    public final TableField<DbCourtRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(16), this, "");

    private DbCourt(Name alias, Table<DbCourtRecord> aliased) {
        this(alias, aliased, null);
    }

    private DbCourt(Name alias, Table<DbCourtRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.db_court</code> table reference
     */
    public DbCourt(String alias) {
        this(DSL.name(alias), DB_COURT);
    }

    /**
     * Create an aliased <code>public.db_court</code> table reference
     */
    public DbCourt(Name alias) {
        this(alias, DB_COURT);
    }

    /**
     * Create a <code>public.db_court</code> table reference
     */
    public DbCourt() {
        this(DSL.name("db_court"), null);
    }

    public <O extends Record> DbCourt(Table<O> child, ForeignKey<O, DbCourtRecord> key) {
        super(child, key, DB_COURT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<DbCourtRecord, Integer> getIdentity() {
        return (Identity<DbCourtRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DbCourtRecord> getPrimaryKey() {
        return Keys.COURT_PKEY;
    }

    @Override
    public List<ForeignKey<DbCourtRecord, ?>> getReferences() {
        return Arrays.asList(Keys.DB_COURT__COURT_ADDRESS_FKEY);
    }

    private transient DbAddress _dbAddress;

    public DbAddress dbAddress() {
        if (_dbAddress == null)
            _dbAddress = new DbAddress(this, Keys.DB_COURT__COURT_ADDRESS_FKEY);

        return _dbAddress;
    }

    @Override
    public DbCourt as(String alias) {
        return new DbCourt(DSL.name(alias), this);
    }

    @Override
    public DbCourt as(Name alias) {
        return new DbCourt(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DbCourt rename(String name) {
        return new DbCourt(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DbCourt rename(Name name) {
        return new DbCourt(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, Integer, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
