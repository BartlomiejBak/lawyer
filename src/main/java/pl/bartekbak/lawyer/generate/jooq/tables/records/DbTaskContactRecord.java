/*
 * This file is generated by jOOQ.
 */
package pl.bartekbak.lawyer.generate.jooq.tables.records;


import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import pl.bartekbak.lawyer.generate.jooq.tables.DbTaskContact;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DbTaskContactRecord extends UpdatableRecordImpl<DbTaskContactRecord> implements Record3<UUID, UUID, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.db_task_contact.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.db_task_contact.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.db_task_contact.task</code>.
     */
    public void setTask(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.db_task_contact.task</code>.
     */
    public UUID getTask() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.db_task_contact.contact</code>.
     */
    public void setContact(UUID value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.db_task_contact.contact</code>.
     */
    public UUID getContact() {
        return (UUID) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, UUID, UUID> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<UUID, UUID, UUID> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return DbTaskContact.DB_TASK_CONTACT.ID;
    }

    @Override
    public Field<UUID> field2() {
        return DbTaskContact.DB_TASK_CONTACT.TASK;
    }

    @Override
    public Field<UUID> field3() {
        return DbTaskContact.DB_TASK_CONTACT.CONTACT;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getTask();
    }

    @Override
    public UUID component3() {
        return getContact();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getTask();
    }

    @Override
    public UUID value3() {
        return getContact();
    }

    @Override
    public DbTaskContactRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public DbTaskContactRecord value2(UUID value) {
        setTask(value);
        return this;
    }

    @Override
    public DbTaskContactRecord value3(UUID value) {
        setContact(value);
        return this;
    }

    @Override
    public DbTaskContactRecord values(UUID value1, UUID value2, UUID value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DbTaskContactRecord
     */
    public DbTaskContactRecord() {
        super(DbTaskContact.DB_TASK_CONTACT);
    }

    /**
     * Create a detached, initialised DbTaskContactRecord
     */
    public DbTaskContactRecord(UUID id, UUID task, UUID contact) {
        super(DbTaskContact.DB_TASK_CONTACT);

        setId(id);
        setTask(task);
        setContact(contact);
    }
}
